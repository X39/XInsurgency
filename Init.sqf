scopename "___sqc_func"; XINS = createhashmapfromarray [["Squares", createhashmapfromarray [["Data", []], ["UnitsPerHouse", 2], ["MaxUnitsPerSquare", 6], ["MaxUnitsPerPlayer", 2], ["MinUnitsPerSquare", 2], ["RespawnTimeout", 180], ["SpawnDistance", 100], ["DespawnDistance", 200]]], ["Caches", createhashmapfromarray [["Data", []], ["Count", 4], ["DistanceBetween", 1000], ["IntelDistances", [900, 750, 600, 450, 300, 200, 150, 100, 50]]]], ["IgnoreAreas", ["West_BaseArea"]], ["Enemy", createhashmapfromarray [["Types", ["I_Soldier_M_F", "I_Soldier_F", "I_Soldier_LAT_F", "I_Soldier_A_F"]], ["Group", creategroup resistance]]]]; if isnil "XINS_READY" then { XINS_READY = false }; XINS_IsSquare = compilefinal "{ scopename ""___sqc_func""; params [[""_vehicle"", nil, [objnull]]]; _vehicle getvariable [""XINS"", false] breakout ""___sqc_func"" }"; XINS_GetSquare = compilefinal "{ scopename ""___sqc_func""; params [[""_vehicle"", nil, [objnull]]]; _vehicle getvariable [""XINS_SQUARE"", false] breakout ""___sqc_func"" }"; XINS_CreateSquareForAllBuildings = compilefinal "{ scopename ""___sqc_func""; private _result = []; private _squares = createhashmapfromarray []; private _mapSize = worldsize; for ""_xPos"" from 50 to _mapSize step 100 do { for ""_yPos"" from 50 to _mapSize step 100 do { if (xins get ""IgnoreAreas"" findif { scopename ""___sqc_func""; [[xpos, ypos], _x] call (_x get ""contained"") breakout ""___sqc_func"" } == -1) then { private _houses = nearestobjects [[xpos, ypos, 0], [""house""], 70.7107]; if (count _houses > 0) then { private _marker = format [""XINS-%1-%2"", xpos, ypos]; _marker setmarkershape ""RECTANGLE""; _marker setmarkerbrush ""Solid""; _marker setmarkertype ""Empty""; _marker setmarkersize [50, 50]; _marker setmarkeralpha 0.75; _marker setmarkercolor ""ColorRed""; private _emptyObj = (""Land_HelipadEmpty_F"" createvehicle [xpos, ypos, 0]); _emptyObj setvariable [""XINS"", true, true]; private _square = createhashmapfromarray [[""X"", xpos], [""Y"", ypos], [""Marker"", _marker], [""EmptyObj"", _emptyObj], [""Publish"", { scopename ""___sqc_func""; params [""___self""]; ___self get ""EmptyObj"" setvariable [""XINS_SQUARE"", ___self, true] }], [""GetCleared"", false], [""SetCleared"", { params [[scopename ""___sqc_func"", ""_flag"", [nil]], ""___self""]; if _flag then { ___self set [""GetCleared"", true]; ___self get ""Marker"" setmarkercolor ""ColorGreen"" } else { ___self set [""GetCleared"", false]; ___self get ""Marker"" setmarkercolor ""ColorRed"" }; [___self] call (___self get ""Publish"") }], [""GetUnits"", { scopename ""___sqc_func""; params [""___self""]; ___self get ""EmptyObj"" getvariable [""XINS_Units"", []] breakout ""___sqc_func"" }], [""SetUnits"", { scopename ""___sqc_func""; params [[""_units"", nil, [[]]], ""___self""]; ___self get ""EmptyObj"" setvariable [""XINS_Units"", _units, true] }]]; _squares set [[xpos, ypos], _square]; results pushback _square } } } }; { private _count = 0; for ""_xPos"" from -1 to 1 do { for ""_yPos"" from -1 to 1 do { private _res = (_squares get [(_x get ""X"") + _xPos, (_x get ""Y"") + _yPos]); if ! isnil ""_res"" then { _count; _count = (_count + 1) } } }; if (_count < xins get ""Squares"" get ""MinUnitsPerSquare"") then { _count = (xins get ""Squares"" get ""MinUnitsPerSquare"") } else { if (_count > xins get ""Squares"" get ""MaxUnitsPerSquare"") then { _count = (xins get ""Squares"" get ""MaxUnitsPerSquare"") } }; _x set [""MaxUnits"", _count] } foreach results; results breakout ""___sqc_func"" }"; XINS_CreateCaches = compilefinal "{ scopename ""___sqc_func"" }"; XINS_Initialize = compilefinal "{ scopename ""___sqc_func""; if isserver then { private _replace = []; { private _size = markersize ignorearea; private _pos = markerpos ignorearea; private _topLeft = [(_pos select 0) - (_size select 0), (_pos select 1) - (_size select 1)]; private _botRight = [(_pos select 0) + (_size select 0), (_pos select 1) + (_size select 1)]; private _ignoreRegion = createhashmapfromarray [[""topLeft"", [(_pos select 0) - (_size select 0), (_pos select 1) - (_size select 1)]], [""botRight"", [(_pos select 0) + (_size select 0), (_pos select 1) + (_size select 1)]], [""contained"", { scopename ""___sqc_func""; params [[""_pos"", nil, [[]]], ""___self""]; ___self get ""topLeft"" select 1 && _pos select 1 <= ___self get ""botRight"" select 1 }]]; _replace pushback _ignoreRegion } foreach (xins get ""IgnoreAreas""); xins set [""IgnoreAreas"", _replace]; xins get ""Squares"" set [""Data"", 0 call XINS_CreateSquareForAllBuildings]; xins get ""Caches"" set [""Data"", 0 call XINS_CreateCaches]; missionnamespace setvariable [""XINS_READY"", true, true] }; if ! isdedicated then { [] spawn xins_playerloop } }"; systemchat "XInsurgency - Version 2.0"; hint "Welcome to XInsurgency! Mission Start could have large delays depending on map size."; systemchat "It could happen that AMMO-CACHES spawn inside of the base"; if ! isdedicated then { [] spawn { scopename "___sqc_func"; waituntil { scopename "___sqc_func"; ! isnil { scopename "___sqc_func"; player breakout "___sqc_func" } breakout "___sqc_func" }; waituntil { scopename "___sqc_func"; ! isnull player breakout "___sqc_func" }; waituntil { scopename "___sqc_func"; alive player breakout "___sqc_func" }; player addeventhandler ["Respawn", { scopename "___sqc_func"; params [["_unit", nil, [objnull]], ["_corpse", nil, [objnull]]]; if ! isnil "Mission_var_SavedInventory" then { [_unit, missionnamespace, mission_var_savedinventory] call BIS_fnc_loadInventory } }] } }
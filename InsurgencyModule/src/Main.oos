#include "defines.def"

using ::std::Context
using ::std::base::VehicleBase
using ::std::Man
using ::std::Vehicle
using ::std::Group

using ::GVARS
using ::X39::Insurgency::Square


namespace X39
{
	namespace Insurgency
	{
		static async void PlayerLoop()
		{
			
			while (!::GVARS::missionContext.getBool("MissionReady", false))
				sleep(1);
			auto noFilter = new array<string>();
			noFilter.pushBack("Land_HelipadEmpty_F");
			array<::X39::Insurgency::Square> currentSquaresInPool = new array<::X39::Insurgency::Square>();
			while (true)
			{
				auto player = ::std::getPlayer();
				if(SQF alive ("player") as bool)
				{
					auto tmp = SQF nearestObjects(player, noFilter, SPAWNDISTANCE) as array<::std::base::VehicleBase>;
					array<::X39::Insurgency::Square> handledSquares = new array<::X39::Insurgency::Square>();
					foreach (auto it in tmp)
					{
						if (::X39::Insurgency::Square::isSquare(it))
						{
							auto square = <::X39::Insurgency::Square>it.getContext().getObject("square");
							square.update();
							handledSquares.pushBack(square);
							if (!currentSquaresInPool.contains(square))
								currentSquaresInPool.pushBack(square);
						}
					}
					auto toRemove = new array<scalar>();
					scalar i = 0;
					for (; i < currentSquaresInPool.length(); i++)
					{
						auto sq = currentSquaresInPool[i];
						if (!handledSquares.contains(sq))
						{
							sq.update();
							toRemove.pushBack(i);
						}
					}
					SQF (toRemove) sort (false);
					foreach (auto index in toRemove)
					{
						currentSquaresInPool.deleteAt(index);
					}
				}
				sleep(0.1);
			}
		}
		static async void ServerLoop()
		{
			while (true)
			{
				array<string> playerUIDs = new array<string>();
				playerUIDs.pushBack("NaN");
				auto arr = SQF allPlayers as array<::std::Man>;
				foreach (auto player in arr)
				{
					playerUIDs.pushBack(SQF getPlayerUID (player) as string);
				}
				arr = SQF allUnits as array<::std::Man>;
				foreach (auto it in arr)
				{
					string uid = it.getContext().getString("owner", "NaN");
					if (!playerUIDs.contains(uid))
					{
						it.delete();
					}
				}
				
				sleep(5);
			}
		}
	}
}
namespace Mission
{
	static array<::X39::Insurgency::Square> allSquares;
	/**
	* Function which will search the whole map for objects of the type "house".
	* 
	* @Return Array containing all houses on a map
	*/
	static array<::X39::Insurgency::Square> getAllBuildingsOnMap()
	{
		//Reserve our returning array
		auto arr = new array<::X39::Insurgency::Square>();
		//Get worldsize
		scalar mapSize = SQF worldSize;
		
		//Loop through whole world
		scalar i = 50;
		for (; i < mapSize; i += 100)
		{
			scalar j = 50;
			for (; j < mapSize; j += 100)
			{
				//Prepare filter array for SQF command NearestObjects
				auto tmpToFind = new array<string>();
				tmpToFind.pushBack("house");
				
				//Execute the actual SQF command NearestObjects to get all houses around search position
				auto tmpArray = SQF nearestObjects(new vec3(i, j, 0), tmpToFind, SEARCHRADIUS) as array<::std::base::VehicleBase>;
				
				if(tmpArray.length() > 0)
				{
					::X39::Insurgency::Square square = new ::X39::Insurgency::Square(i, j);
					
					//Finally join our temporary array with our returning array
					square.houses.join(tmpArray);
					if(square.prepare())
					{
						arr.pushBack(square);
					}
				}
			}
		}
		return arr;
	}
	static fnc ::std::Context createContext()
		_grp = createGroup sideLogic;
		_logic = (_grp) createUnit ["Logic", [ 0 , 0 , 0 ], [ ], 0, "NONE"];
		[_logic] join grpNull;
		deleteGroup _grp;
		_logic
	endFnc
	static void postInit()
	{
		::GVARS::unitClasses = new array<string>();
		::GVARS::unitClasses.pushBack("I_Soldier_F");
		if (isServer())
		{
			SQF createCenter (SQF resistance);
			::GVARS::missionContext = createContext();
			::GVARS::missionContext.setBool("MissionReady", false, true);
			SQF publicVariable ("GVAR_GVARS_missionContext");
			::GVARS::missionGroup = ::std::createGroupGuer();
			SQF publicVariable ("GVAR_GVARS_missionGroup");
			
			allSquares = getAllBuildingsOnMap();
			::GVARS::missionContext.setBool("MissionReady", true, true);
			::X39::Insurgency::ServerLoop();
		}
		if (!isDedicated())
			::X39::Insurgency::PlayerLoop();
	}
}
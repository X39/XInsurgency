#include "defines.def"

using ::std::Context
using ::std::Man
using ::std::base::VehicleBase
using ::GVARS
using ::X39::Insurgency::Square

namespace X39
{
	namespace Insurgency
	{
		static async void PlayerLoop()
		{
			auto player = ::std::getPlayer();
			
			while (!::GVARS::missionContext.getBool("MissionReady", false))
				sleep(1);
			auto noFilter = new array<string>();
			noFilter.pushBack("Land_HelipadEmpty_F");
			while (true)
			{
				auto tmp = SQF nearestObjects(player, noFilter, SEARCHRADIUS * 2) as array<::std::base::VehicleBase>;
				foreach (auto it in tmp)
				{
					auto square = <::X39::Insurgency::Square>::it.getContext().getNativeObject("square");
					auto context = square.veh.getContext();
					if (context.getScalar("houseCount", 0) * HOUSEUNITQUOTA > context.getScalar("unitCount", 0))
					{
						square.createUnit();
					}
					else
					{
						square.update();
					}
				}
			}
		}
	}
}
namespace Mission
{
	static array<::X39::Insurgency::Square> allSquares;
	/**
	* Function which will search the whole map for objects of the type "house".
	* 
	* @Return Array containing all houses on a map
	*/
	static array<::X39::Insurgency::Square> getAllBuildingsOnMap()
	{
		//Reserve our returning array
		auto arr = new array<::X39::Insurgency::Square>();
		//Get worldsize
		scalar mapSize = SQF worldSize;
		
		//Loop through whole world
		scalar i = 50;
		scalar j = 50;
		for (; i < mapSize; i += 100)
		{
			for (; j < mapSize; j += 100)
			{
				::X39::Insurgency::Square square = new ::X39::Insurgency::Square(i, j);
				arr.pushBack(square);
				//Prepare filter array for SQF command NearestObjects
				auto tmpToFind = new array<string>();
				tmpToFind.pushBack("house");
				//Execute the actual SQF command NearestObjects to get all houses around search position
				auto tmpArray = SQF nearestObjects(new vec3(i, j, 0), tmpToFind, SEARCHRADIUS) as array<::std::base::VehicleBase>;
				
				//Finally join our temporary array with our returning array
				square.houses.join(tmpArray);
				square.prepare();
			}
		}
		return arr;
	}
	static void postInit()
	{
		if (isServer())
		{
			::GVARS::missionContext = SQF createLocation ("NameVillage", {0,0,0}, 0, 0) as ::std::Context;
			SQF publicVariable ("GVAR_Mission_missionContext");
			
			allSquares = getAllBuildingsOnMap();
		}
		if (!isDedicated())
			::X39::Insurgency::PlayerLoop();
	}
}
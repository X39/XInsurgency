#include "defines.def"

using ::std::Context
using ::std::base::VehicleBase
using ::std::Man
using ::std::Vehicle
using ::std::Group
using ::std::Side;

using ::GVARS
using ::X39::Insurgency::Square
using ::X39::Insurgency::AmmoCache
using ::X39::Insurgency::Insurgency

#ifdef DEBUG
using ::std::Marker;
#endif

namespace Mission
{
	static array<::X39::Insurgency::Square> allSquares;
	/**
	* Function which will search the whole map for objects of the type "house".
	* 
	* @Return Array containing all houses on a map
	*/
	static array<::X39::Insurgency::Square> getAllBuildingsOnMap()
	{
		//Reserve our returning array
		auto arr = new array<::X39::Insurgency::Square>();
		//Get worldsize
		scalar mapSize = SQF worldSize;
		
		//Loop through whole world
		for (scalar i = 50; i < mapSize; i += 100)
		{
			for (scalar j = 50; j < mapSize; j += 100)
			{
				bool flag = false;
				foreach (auto it in ::GVARS::IgnoreAreas)
				{
					if (it.contains(new vec3(i, j, 0)))
					{
						flag = true;
						break;
					}
				}
				if (!flag)
				{
					//Prepare filter array for SQF command NearestObjects
					auto tmpToFind = new array<string>();
					tmpToFind.pushBack("house");
					
					//Execute the actual SQF command NearestObjects to get all houses around search position
					auto tmpArray = SQF nearestObjects(new vec3(i, j, 0), tmpToFind, SEARCHRADIUS) as array<::std::base::VehicleBase>;
					
					if (tmpArray.length() > 0)
					{
						::X39::Insurgency::Square square = new ::X39::Insurgency::Square(i, j);
						
						//Finally join our temporary array with our returning array
						square.houses.join(tmpArray);
						if (square.prepare())
						{
							arr.pushBack(square);
						}
					}
				}
			}
		}
		return arr;
	}
	static void preInit()
	{
		::GVARS::HouseUnitQuota = 2;
		::GVARS::MaxUnitsPerSquare = 6;
		::GVARS::RespawnTimeout = 180;
		::GVARS::SpawnDistance = 100;
		::GVARS::DespawnDistance = 200;
		::GVARS::IgnoreAreas = new array<::X39::Insurgency::IgnoreArea>();
	}
	static void generateAmmmoCaches(scalar count, scalar range)
	{
		scalar mapSize = SQF worldSize;
		scalar curRange;
		::GVARS::AmmoCaches = new array<::X39::Insurgency::AmmoCache>();
		::GVARS::AmmoCachesInitialCount = count;
		for (scalar i = 0; i < count; i++)
		{
			curRange = range;
			auto tmpToFind = new array<string>();
			tmpToFind.pushBack("house");
			while (true)
			{
				auto tmpArray = new array<::std::base::VehicleBase>();
				while (tmpArray.length() == 0)
					tmpArray = SQF nearestObjects(new vec3(random(mapSize), random(mapSize), 0), tmpToFind, 100) as array<::std::base::VehicleBase>;
				auto house = tmpArray[floor(random(tmpArray.length()))];
				bool flag = false;
				foreach (auto it in ::GVARS::AmmoCaches)
				{
					if (SQF (it.veh) distance (house) as scalar < curRange)
					{
						flag = true;
						curRange--;
					}
				}
				if (!flag)
				{
					auto positions = ::X39::Insurgency::receiveAllBuildingPositions(house);
					if (positions.length() > 0)
					{
						auto position = positions[floor(random(positions.length()))];
						auto cache = new ::X39::Insurgency::AmmoCache(position.getX(), position.getY(), position.getZ() + 0.001);
						::GVARS::AmmoCaches.pushBack(cache);
						break;
					}
				}
			}
		}
		SQF publicVariable (deref ::GVARS::AmmoCaches);
		SQF publicVariable (deref ::GVARS::AmmoCachesInitialCount);
	}
#ifdef DEBUG
	static fnc ::std::Context createContext()
		_grp = createGroup sideLogic;
		_logic = (_grp) createUnit ["Logic", [ 0 , 0 , 0 ], [ ], 0, "NONE"];
		[_logic] join grpNull;
		deleteGroup _grp;
		_logic
	endFnc
	static void postInit()
	{
		auto context = SQF (SQF MissionNamespace) getVariable ("MISSIONCONTEXT");
		
		auto side = new ::std::Side();
		auto unitClasses = new array<string>();
		unitClasses.pushBack("I_Soldier_F");
		
		auto markerArray = new array<::std::Marker>();
		auto ignoreMarker = new ::std::Marker("ignoreArea1");
		ignoreMarker.setShape(::std::Marker::Shape::Rectangle);
		ignoreMarker.setBrush(::std::Marker::Brush::Solid);
		ignoreMarker.setType("Empty");
		ignoreMarker.setPosition(2187, 5667);
		ignoreMarker.setSize(200, 200);
		ignoreMarker.setAlpha(0.75);
		markerArray.pushBack(ignoreMarker);
		
		ignoreMarker = new ::std::Marker("ignoreArea2");
		ignoreMarker.setShape(::std::Marker::Shape::Rectangle);
		ignoreMarker.setBrush(::std::Marker::Brush::Solid);
		ignoreMarker.setType("Empty");
		ignoreMarker.setPosition(3338, 2955);
		ignoreMarker.setSize(200, 200);
		ignoreMarker.setAlpha(0.75);
		markerArray.pushBack(ignoreMarker);
		
		
		initInsurgencyMission(context, side.asResistance(), unitClasses, markerArray, 4, 1000);
	}
#endif
	static void initInsurgencyMission(::std::Context logic, ::std::Side side, array<string> unitClasses, array<::std::Marker> markerArray, scalar ammoCacheCount, scalar ammoCacheDistance)
	{
		::GVARS::unitClasses = unitClasses;
		::GVARS::missionContext = logic;
		::GVARS::AmmoCachesIntelDistances = new array<scalar>();
		::GVARS::AmmoCachesIntelDistances.pushBack(900);
		::GVARS::AmmoCachesIntelDistances.pushBack(750);
		::GVARS::AmmoCachesIntelDistances.pushBack(600);
		::GVARS::AmmoCachesIntelDistances.pushBack(450);
		::GVARS::AmmoCachesIntelDistances.pushBack(300);
		::GVARS::AmmoCachesIntelDistances.pushBack(200);
		::GVARS::AmmoCachesIntelDistances.pushBack(150);
		::GVARS::AmmoCachesIntelDistances.pushBack(100);
		::GVARS::AmmoCachesIntelDistances.pushBack(50);
        ::GVARS::missionGroup = new ::std::Group(side);
		if (isServer())
		{
			SQF createCenter (side);
			::GVARS::missionContext.setBool("MissionReady", false, true);
			
			foreach (auto it in markerArray)
			{
				auto size = it.getSize();
				auto pos = it.getPosition();
				
				scalar x = pos[0];
				scalar y = pos[1];
				scalar w = size[0];
				scalar h = size[1];
				
				auto topLeft = new vec3(x - w, y - h, 0);
				auto botRight = new vec3(x + w, y + h, 0);
				auto ia = new ::X39::Insurgency::IgnoreArea(topLeft, botRight);
				::GVARS::IgnoreAreas.pushBack(ia);
				it.delete();
			}
			
			allSquares = getAllBuildingsOnMap();
			generateAmmmoCaches(ammoCacheCount, ammoCacheDistance);
			::GVARS::missionContext.setBool("MissionReady", true, true);
			
			//Run server loop
			::X39::Insurgency::ServerLoop();
		}
		if (!isDedicated())
			::X39::Insurgency::PlayerLoop();
	}
}